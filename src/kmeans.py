# -*- coding: utf-8 -*-
"""FinalProj.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1gJ3YBJ_fonZcvQ1YLJSbN8enyCsk3utm
"""

import pandas as pd
import os
import random
import numpy as np
from pathlib import Path

DATA_FILE = Path(__file__).parent.parent / "./data/data.csv"

def runKmeans(sample_size=None):
    file = pd.read_csv(DATA_FILE, header= None)

    if sample_size:
        file = file.head(sample_size)

    file.columns

    print(file[0][0]) #acousticness[0,1]
    print(file[1][0]) #Will use as cluster id (currently artist name)
    print(file[2][0]) #Dancablility[0,1]
    print(file[3][0]) #Duration in ms[4937,5338302]
    print(file[4][0]) #Energy[0,1]
    print(file[5][0]) #Explicit[0 or 1]
    print(file[6][0]) #Id
    print(file[7][0]) #Instrumentalness[0,1]
    print(file[8][0]) #Key[0,12]
    print(file[9][0]) #Liveness[0,1]
    print(file[10][0]) #Loudness[-60,5]
    print(file[11][0]) #Mode[0 or 1]
    print(file[12][0]) #Name
    print(file[13][0]) #Popularity [0,100]
    print(file[14][0]) #Date
    print(file[15][0]) #Speechiness[0,1]
    print(file[16][0]) #Tempo[0,245]
    print(file[17][0]) #Valence,positiveness [0,1]
    print(file[18][0]) #Year[1920,2021]

    Points=174389 #max 174390
    M=np.zeros((Points,12))
    Norm= np.zeros((2,12))
    Avg= np.zeros(12)

    Norm[0][0]=1.0 #acousticness
    Norm[0][1]=1.0 #danceability
    Norm[0][2]=(5338302-4937) #duration_ms
    Norm[0][3]=1.0 #energy
        #Norm[0][4]=1.0 #explicit
    Norm[0][4]=1.0 #instrumentalness
        #Norm[0][6]=11.0 #key
    Norm[0][5]=1.0 #liveness
    Norm[0][6]=(3.85+60.0) #loudness
        #Norm[0][9]=1.0 #mode
    Norm[0][7]=100 #popularity
    Norm[0][8]=1.0 #speechiness
    Norm[0][9]=243.5 #tempo
    Norm[0][10]=1.0 #valence
    Norm[0][11]=(2021-1920) #year
        
    Norm[1][2]=-4937
    Norm[1][6]=60.0
    Norm[1][11]=-1920.0

    Avg[0]=0.49922848176599677
    Avg[1]=0.5367575873478169
    Avg[2]=0.04272593981962685
    Avg[3]=0.4827208433255605
        #Avg[4]=0.0681350314526719
    Avg[4]=0.1972520469270387
        #Avg[6]=0.47320958004542396
    Avg[5]=0.2111231446364156
    Avg[6]=0.7556638215898979
        #Avg[9]=0.7023837512687153
    Avg[7]=0.25693380889848183
    Avg[8]=0.10572918360676538
    Avg[9]=0.48051950635085194
    Avg[10]=0.5245326904454883
    Avg[11]=0.564967962542266
    for i in range(0,Points):
        c=0
        for j in range(0,19):
            if j!=1 and j!=6 and j!=12 and j!=14 and j!=5 and j!=8 and j!=11:
                M[i][c]=file[j][i+1]
                M[i][c]=((M[i][c]+Norm[1][c])/Norm[0][c])-Avg[c]
                c=c+1
            
    print(M[1])
    print(file[18][2])

    COV= np.zeros((12,12))
    for i in range(0,12):
        for j in range(0,12):
            for n in range(0,Points):
                COV[i][j]=COV[i][j]+M[n][j]*M[n][i]/Points
            
    print(COV)

    w,v = np.linalg.eig(COV)
    print("Eigenvalues:\n",w)
    print("Eigenvectors:\n",v)

    import matplotlib.pyplot as plt
    fig=plt.figure()
    ax=fig.add_axes([0,0,1,1])
    PCA=['1','2','3','4','5','6','7','8','9','10','11','12']
    ax.bar(PCA,w)
    plt.show()


    #Eigen vectors:
    #[[ 6.67191184e-01 -1.12253636e-01  2.29687985e-01  1.50281221e-02
    #   2.89429567e-02 -1.28737614e-01  3.33187592e-01  4.17970649e-01
    #  -7.70738231e-03 -4.86091194e-02  5.63184662e-02  2.34599359e-01
    #   3.71753565e-02  3.19950410e-01  1.47536355e-01]
    # [-1.22400175e-01  1.83542095e-02  1.74734753e-01  1.13873362e-02
    #  -2.36683294e-01  1.80810830e-01  2.73385904e-01 -2.05605622e-01
    #   2.81509117e-03 -8.17328422e-02  4.41376251e-01  1.94005780e-02
    #   6.28632243e-01 -1.32191136e-01  3.65737338e-01]
    # [-2.76479347e-03 -2.96196904e-03 -1.68818471e-02 -1.04852542e-03
    #   1.01346104e-02 -5.35278571e-03 -8.91791268e-03 -1.03300141e-04
    #  -9.99546652e-01 -1.22001804e-02 -1.18773089e-03  2.14032372e-04
    #   1.07747622e-02 -7.67982370e-03  8.22787652e-03]

    a=v[:,0]
    b=v[:,1]
    c=v[:,2]
    print(a)
    print(b)
    print(c)

    print(np.linalg.norm(b))
    N=np.zeros((Points,3))
    for i in range(0,Points):
        N[i][0]=np.dot(M[i],a)
        N[i][1]=np.dot(M[i],b)
        N[i][2]=np.dot(M[i],c)    
    print(N[1])

    k=11 #seeds
    Iter=20 #iterations
    Seeds = np.zeros((k,3))
    Label= np.zeros(Points)
    NumInK=np.zeros(k)
    AvD=np.zeros((k,3))
    inter=1

    for i in range(0,k):
        #print(i)
        s=random.randint(0,Points-1)
        for j in range(0,3):
            Seeds[i][j]=N[s][j]
        #print(s)
        #print(Seeds)
    for l in range(0,Iter):
        print(l)
        sum2=np.zeros(k)
        NumInK=np.zeros(k)
        AvD=np.zeros((k,3))
        for n in range(0,Points):
            sum2=np.zeros(k)
            for j in range(0,3):
                for i in range(0,k):
                    sum2[i]=sum2[i]+(N[n][j]-Seeds[i][j])*(N[n][j]-Seeds[i][j])
                    #if sum2[i]==0: print(N[n][j],Seeds[i][j],n,i,j)
            Label[n]=np.argmin(sum2)
            inter=int(Label[n])
            NumInK[inter]=NumInK[inter]+1

        for n in range(0,Points):
            for j in range(0,3):
                inter=int(Label[n])
                AvD[inter][j]=AvD[inter][j]+(N[n][j])/NumInK[inter]
        Seeds=AvD
        print(Seeds)

    from mpl_toolkits.mplot3d import Axes3D
    fig=plt.figure()
    ax = fig.add_subplot(111,projection='3d')

    ax.scatter(N[:,0],N[:,1],N[:,2],zdir='z',s=1,c=Label)

    print(Var)
    print(Seeds)

    dists=0
    Var=np.zeros(k)
    for n in range(0,Points):
        dists=0
        inter=int(Label[n])
        for j in range(0,3):
            #AvD[inter][j]=AvD[inter][j]+(N[n][j])/NumInK[inter]
            dists=dists+(N[n][j]-Seeds[i][j])*(N[n][j]-Seeds[i][j])
        Var[inter]=Var[inter]+(dists)/NumInK[inter]
    print(Var)
    print(np.mean(Var))
    print(Seeds)
    print(NumInK)

    print(Var)
    print(np.mean(Var))
    print(Seeds)

    Elbx=[3,4,5,6,7,8,9,10,11] #7
    Elby=[0.8202592369766691,0.972836502703705,0.9232836431907482,0.7721849507406834,1.0127002587115839,0.9372076317764364,0.6903978688669122,0.9655345022586443,0.6560038794397374]
    plt.plot(Elbx,Elby)

    #SILHOUETTE
    Testy=np.zeros(k)
    Similar=np.zeros(1000)
    SIL=np.zeros((3,1000))
    for n in range(0,1000):
        Testy=np.zeros(k)
        for i in range(0,k):
            for j in range(0,3):
                Testy[i]=Testy[i]+(N[n*100][j]-Seeds[i][j])*(N[n*100][j]-Seeds[i][j])
            if Label[n*100]==i:
                Testy[i]=Testy[i]+10000
        Similar[n]=np.argmin(Testy)

    dist=0    
    for n in range(0,1000):
        for m in range (0,1000):
            if Similar[n]==int(Label[m*100]):
                inter=int(Label[m*100])
                dist=0
                for j in range(0,3):
                    dist=dist+(N[n*100][j]-N[m*100][j])**2
                SIL[0][n]=SIL[0][n]+(dist**0.5)/NumInK[inter]
            
            if int(Label[n*100])==int(Label[m*100]):
                dist=0
                inter=int(Label[n*100])
                for j in range(0,3):
                    dist=dist+(N[n*100][j]-N[m*100][j])**2
                SIL[1][n]=SIL[1][n]+(dist**0.5)/NumInK[inter]
                
        SIL[2][n]=(SIL[0][n]-SIL[1][n])/(max(SIL[0][n],SIL[1][n]))

    Xx=np.arange(0,1000,1)
    Yy=np.sort(SIL[2])
    plt.bar(Xx,Yy)
    plt.show
    print(np.mean(SIL[2]))

    dist=0
    del1=100
    del2=0
    DUNN=0
    for l in range(0,k):
        for i in range(0,k):
            dist=0

            for j in range(0,3):
                dist=dist+(Seeds[l][j]-Seeds[i][j])*(Seeds[l][j]-Seeds[i][j])
            if dist<del1 and dist!=0: del1=dist
    dist=0
    for n in range(0,1000):
        for m in range(0,1000):
            if int(Label[n*100])==int(Label[m*100]):
                dist=0
                for j in range(0,3):
                    dist=dist+(N[n*100][j]-N[m*100][j])**2
                if dist>del2: del2=dist
    DUNN=del1/del2
    print(DUNN)

    Songs=np.ones(k)
    Testdist=np.ones(k)
    for n in range(0,Points):
        for i in range(0,k):
            dist=0
            for j in range(0,3):
                dist=dist+(N[n][j]-Seeds[i][j])**2
            if dist<Testdist[i]: 
                Testdist[i]=dist
                Songs[i]=n 
    print(Songs)

    for i in range(0,k):
        dist=int(Songs[i])
        print(file[12][dist],file[1][dist])

    return
